# '-' —Ñ—É–Ω–∫—Ü–∏–∏
import keyboard
import ctypes
from ctypes import wintypes
import time
import pyperclip
import win32gui#pip install pywin32
import win32con
def find_corresponding_char(ky, alf, alf2):  # –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–∏–º–≤–æ–ª–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ü–µ–ª—å—é
    # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —Å–∏–º–≤–æ–ª–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ alf
    index = -1  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–µ–º -1
    for idx, (key, value) in enumerate(alf.items()):
        if key == ky or value == ky:
            index = idx
            break

    # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–∞–π–¥–µ–Ω –∏ –æ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–∞ alf2, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∏–º–≤–æ–ª
    if index != -1 and index < len(alf2):
        return alf2[index]
    else:
        return None  # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ alf2, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
def load_keyboard_layout(layout):
    user32 = ctypes.WinDLL('user32')
    KLF_ACTIVATE = 1  # Activate layout
    WM_INPUTLANGCHANGEREQUEST = 0x0050  # Message for changing layout
    HWND_BROADCAST = 0xFFFF  # Send message to all windows
    # Load keyboard layout if not loaded yet
    if layout not in LAYOUT_HANDLES:
        LAYOUT_HANDLES[layout] = user32.LoadKeyboardLayoutW(layout, KLF_ACTIVATE)
    layout_handle = LAYOUT_HANDLES[layout]
    # Get the active window
    hwnd = user32.GetForegroundWindow()

    # Get the window name
    length = user32.GetWindowTextLengthW(hwnd)
    buff = ctypes.create_unicode_buffer(length + 1)
    user32.GetWindowTextW(hwnd, buff, length + 1)

    # If the active window is not MS Word, send the message
    if "Microsoft Word" not in buff.value:
        user32.PostMessageW(hwnd, WM_INPUTLANGCHANGEREQUEST, 0, layout_handle)
def print_pressed_keys(e):
    global pred  # –ø–∞–º—è—Ç–∫–∞ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏ –Ω–∞–∂–∞—Ç–∏—è
    global rdy  # —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π

    global svst  # –ø—É–ª –¥–ª—è —Ä–∞–∑–±–∏—Ç—ã—Ö –≤—Å—Ç–∞–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ, !!—Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–∞–≤–∏—à –≤—Å—Ç–∞–≤–∫–∏
    global svst1  # —Å—á–µ—Ç—á–∏–∫ —é–∑–∞ —Ä–∞–∑–±–∏—Ç—ã—Ö –≤—Å—Ç–∞–≤–æ–∫
    global svval # —Å–ª–æ–≤–∞—Ä—å —Ä–∞–∑–± –≤—Å—Ç–∞–≤–æ–∫
    global svms  # –º–µ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ 0 —Å–≤–æ–±–æ–¥–µ–Ω, 5 –∑–∞–Ω—è—Ç –Ω–∞ –≤—Å—Ç–∞–≤–∫—É, 6 –∑–∞–Ω—è—Ç –Ω–∞ —à–∏—Ñ—Ä
    global prsimb  # –Ω–æ–º–µ—Ä –ø—Ä–æ—à–ª–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –º–æ–ª–Ω–∏–∏

    if not (ctypes.WinDLL('user32').GetKeyState(0x90) & 1):  # –Ω–∞–º–ª–æ–∫–æ–≤—ã–π –æ—Ç–±–æ–π –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω –Ω–µ—á–∞—è–Ω–Ω–æ –≤–∫–ª—é—á–∏—Ç—Å—è
        ctypes.WinDLL('user32').keybd_event(0x90, 0, 0, 0)
        ctypes.WinDLL('user32').keybd_event(0x90, 0, 0x0002, 0)

    try:
        _ = svms
    except NameError:
        svms = 0
    #print(e, e.event_type, e.name)  # KeyboardEvent(right alt down) down right alt–∞hh–∞–∞—Ä–∞f
    if rdy == 2 and e.name in d:
        if str(d.get(e.name))[0] == "-":  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ –¥–æ–ø –æ–ø—Ü–∏–π –≤–º–µ—Å—Ç–æ –≤–≤–æ–¥–∞
            if str(d.get(e.name)) == "-–∞–Ω–≥–ª":  # —Ä–∞—Å–∫–ª–∞–¥–∫–∏
                keyboard.press_and_release('backspace')
                load_keyboard_layout(ENGLISH_LAYOUT)
            if str(d.get(e.name)) == "-–∞–Ω–≥–ª2":  # —Ä–∞—Å–∫–ª–∞–¥–∫–∏
                keyboard.press_and_release('backspace')
                load_keyboard_layout(ENGLISH_LAYOUT)
                svms = 8
            if str(d.get(e.name)) == "-—Ä—É—Å":
                keyboard.press_and_release('backspace')
                load_keyboard_layout(RUSSIAN_LAYOUT)
            if str(d.get(e.name)) == "-–∑–∞–º–µ–Ω–∞":
                keyboard.press_and_release('backspace')
                m = pyperclip.paste()
                m = m.translate(trans_table)
                pyperclip.copy(m)
#!! –ë–ò–¢–´–ô, —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–∑–∞–Ω—è—Ç—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏
            # if str(d.get(e.name)) == '-–∫–∞—Å–∫–∞–¥–≤—Å—Ç–∞–≤–∫–∞':
            #     svst = pyperclip.paste()
            #     if not svst == "":
            #         svst1 = 0
            #         svval = svst.split('\n')
            #         pyperclip.copy(svval[svst1])
            #         if len(svval) > 1:
            #             svms = 5
            #         print("—Å—ä–µ–¥–µ–Ω–æ")
            if str(d.get(e.name)) == "-—Å–ª–æ–≤2": # —Å—ä–µ–¥–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç–∞–≤–∫—É ùíπ ‡≤Ω ·ë∂ –≥ ·ëª ·öã ùû∑ ùúï l i r „Å∏ œâ N v L I „Åè ƒø ùôπ êåô „ÇΩ ‡´™ êíá ùû∑ „Çë II ∆è „ÉÅ „ÇÉ
                svms = 6
                keyboard.press_and_release('backspace')
        else:  # –ø—Ä–æ—Å—Ç–æ –≤–≤–æ–¥
            keyboard.press_and_release('backspace')
            keyboard.write(d.get(e.name))
        rdy = 0


    if e.name == "insert" and svms == 5 and e.event_type == "down" and pred.name == "right shift":# –ª–æ–≤–∏–º —Ä–∞–∑–± –≤—Å—Ç–∞–≤–∫—É –¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è
        svst1 = svst1+1
        if len(svval) <= svst1-1:
            svst1 = 0
        pyperclip.copy(svval[svst1])
    if e.name == "insert" and e.event_type == "down" and pred.name == "right ctrl":  # –ª–æ–≤–∏–º —Ä–∞–∑–± –≤—Å—Ç–∞–≤–∫—É –¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è
        svms = 0

    if e.event_type == "up" and (e.name == knopnadopt1 or e.name == knopnadopt2) and rdy == 1:  # –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–∂–∞—Ç–∏—è –∫–æ–º–∞–Ω–¥—ã —à–∏—Ñ—Ç
        rdy = 2
    else:
        rdy = 0
    if e.event_type == "down" and (e.name == knopnadopt1 or e.name == knopnadopt2):
        rdy = 1
    if (svms == 6 or svms == 7) and e.event_type == "up":# –≤–∫–ª—é—á–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–º–µ–Ω—ã —à, 6 –ø–µ—Ä–≤–∏—á–Ω–æ–µ (—Å–∞–º —à) 7 –≤—Ç–æ—Ä–∏—á–Ω–æ–µùû∑
        print(f"Event: {e.name}, Type: {e.event_type}, State: {svms}")
        if svms == 7:
            rs = find_corresponding_char(e.name, alf, alf2)
            #print(e.name)
            if rs:
                keyboard.press_and_release('backspace')
                keyboard.write(rs)
                prsimb = alf2.find(rs)
            elif e.name == "space":
                keyboard.press_and_release('backspace')
                rs = "‰∏≠Âú∞Ê∞¥È¢®ÈáëÂíå"[int(prsimb/6)]
                keyboard.write(rs)#‰∏≠Âú∞Ê∞¥È¢®ÈáëÂíå    "‚ö°"
            else:
                svms = 0  # –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ=—Å–±—Ä–æ—Å
        else:
            svms = 7
    if e.name == "space" and svms==8: # –≤–∫–ª—é—á–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–æ–≤–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å –∑–∞–º–µ–Ω–æ–π, –ø—Ä–æ–±–µ–ª - –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Ä—É—Å
        svms = 0
        load_keyboard_layout(RUSSIAN_LAYOUT)
    pred = e
rdy = 0
# —Å–ª–æ–≤–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –∏ —Å–ø–µ—Ü
d = {'1': "¬´¬ª", '2': '"', '3': "#", '4': ";", '5': "$", '6': ":", '7': "&", "—Ä": "-—Ä—É—Å", "h": "-—Ä—É—Å", "f": "-–∞–Ω–≥–ª",
     "–∞": "-–∞–Ω–≥–ª", '—ç': "'", "'": "'", '—é': ">", '.': ">", '–±': "<", ',': "<", '/': ",", '—Ö': "[", '[': "[", '—ä': "]",
     ']': "]", '–∂': ":", ';': ":", '`': "-–∑–∞–º–µ–Ω–∞", '—ë': "-–∑–∞–º–µ–Ω–∞", 'right ctrl': '-–∫–∞—Å–∫–∞–¥–≤—Å—Ç–∞–≤–∫–∞', 'i': "-—Å–ª–æ–≤2",
     '—à': '-—Å–ª–æ–≤2', "–≤": "-–∞–Ω–≥–ª2", "d": "-–∞–Ω–≥–ª2"}
# —Å–ª–æ–≤–∞—Ä—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
alf = {'q': "–π", 'w': "—Ü", 'e': "—É", 'r': "–∫", 't': "–µ", 'y': "–Ω", 'u': "–≥", 'i': "—à", 'o': "—â", 'p': "–∑", '[': "—Ö",
       ']': "—ä", 'a': "—Ñ", 's': "—ã", 'd': "–≤", 'f': "–∞", 'g': "–ø", 'h': "—Ä", 'j': "–æ", 'k': "–ª", 'l': "–¥", ';': "–∂",
       "'": "—ç", 'z': "—è", 'x': "—á", 'c': "—Å", 'v': "–º", 'b': "–∏", 'n': "—Ç", 'm': "—å", ',': "–±", '.': "—é", '/': ".",
       '–π': "q", '—Ü': "w", '—É': "e", '–∫': "r", '–µ': "t", '–Ω': "y", '–≥': "u", '—à': "i", '—â': "o", '–∑': "p", '—Ö': "[",
       '—ä': "]", '—Ñ': "a", '—ã': "s", '–≤': "d", '–∞': "f", '–ø': "g", '—Ä': "h", '–æ': "j", '–ª': "k", '–¥': "l", '–∂': ";",
       '—ç': "'", '—è': "z", '—á': "x", '—Å': "c", '–º': "v", '–∏': "b", '—Ç': "n", '—å': "m", '–±': ",", '—é': ".", '&': "?"}
alf2 = "√Ø‡´™ùôπr·öãNzùû∑„Çëùúï„ÇΩ'êåô‚Ö°·ë∂ùíπLIv„Å∏·ëªùû∑∆è„ÇÉêíá„Åèœâiƒø'S„ÉÅ,"  # ‚Ö° –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º –≤ –∏–º–µ–Ω–∞—Ö
trans_table = str.maketrans(alf)  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ maketrans().
RUSSIAN_LAYOUT = '00000419'
ENGLISH_LAYOUT = '00000409'
LAYOUT_HANDLES = {}
knopnadopt1 = "right shift"  # right alt –ó–∞–¥–≤–æ–µ–Ω–∏–µ –ø–æ —Å–ª—É—á–∞—é —Ä–∞–∑–Ω—ã—Ö –Ω–∞–∑—ã–≤–Ω–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∫–∞—Ö
knopnadopt2 = "right shift"  # alt gr

step = "—É–±–∏—Ä–∞–µ–º —Å —Ñ–æ–Ω–∞"
def set_window_opacity(hwnd, opacity):
    """ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–∫–Ω–∞. """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1
    if opacity < 0 or opacity > 1:
        raise ValueError("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 255
    opacity = int(opacity * 255)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–∫–Ω–∞
    win32gui.SetWindowLong(hwnd, win32con.GWL_EXSTYLE,
                           win32gui.GetWindowLong(hwnd, win32con.GWL_EXSTYLE) | win32con.WS_EX_LAYERED)
    win32gui.SetLayeredWindowAttributes(hwnd, 0, opacity, win32con.LWA_ALPHA)
def hide_window_from_taskbar(hwnd):
    """ –°–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á. """
    # –°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
    #win32gui.ShowWindow(hwnd, win32con.SW_HIDE)
    win32gui.ShowWindow(hwnd, win32con.SW_SHOW)
    # –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–∫–Ω–µ —Å –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á
    win32gui.SetWindowLong(hwnd, win32con.GWL_EXSTYLE,
                           win32gui.GetWindowLong(hwnd, win32con.GWL_EXSTYLE) | win32con.WS_EX_TOOLWINDOW)

if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º HWND (–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –æ–∫–Ω–∞) –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    –∏–º—è–æ–∫–Ω–∞ = 'keylog ‚Äì Keylog.py'#"Fallout II  @640x480x1   "
    hwnd = win32gui.FindWindow(None, –∏–º—è–æ–∫–Ω–∞)
    if hwnd:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        set_window_opacity(hwnd, 0.3)
        hide_window_from_taskbar(hwnd)
    else:
        print("–û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

keyboard.hook(print_pressed_keys)  # KeyboardEvent(down up) up down
keyboard.wait()

